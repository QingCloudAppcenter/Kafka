{{- if eq $myRole "kafka" }}

{{ $eipCount := 0 }}
{{ $nodeCount := 0 }}
{{- range $instanceId := lsdir (printf "/hosts/%s" $myRole) }}
{{- $nodeEip := getv (printf "/hosts/%s/%s/eip" $myRole $instanceId) }}
{{ $nodeCount = add 1 $nodeCount }}
{{- if $nodeEip }}{{ $eipCount = add 1 $eipCount }}{{ end }}
{{- end }}

flush  /opt/app/current/conf/kafka/server.properties << KAFKA_SERVER_PROPERTIES_EOF
# fixed params
broker.id={{ getv "/host/sid" }}
broker.rack={{ getv "/host/zone" (getv "/cluster/zone") }}
host.name={{ $myIp }}
log.dirs=/data/kafka/kafka-logs
log.flush.interval.messages=10000
log.flush.interval.ms=1000
log.retention.check.interval.ms=300000
port=9092
replica.fetch.max.bytes=1000000
{{- $clusterId := getv "/cluster/cluster_id" }}
{{- $zkHosts := getvs "/links/zk_service/hosts/*/ip" }}
zookeeper.connect={{ range $i, $ip := $zkHosts }}{{ if $i }},{{ end }}{{ $ip }}:{{ $zkPort }}{{ end }}/kafka/{{ $clusterId }}
zookeeper.connection.timeout.ms=6000
zookeeper.session.timeout.ms=6000

# params input by user
{{- range gets "/env/*" | filter ".+" }}
{{- $key := base .Key }}
{{- if not (eq (index (split $key ".") 0) "kafka-manager") }}
{{ $key }}={{ .Value }}
{{- end }}
{{- end }}

# monitor
external.kafka.statsd.dimension.enabled.meanRate=false
external.kafka.statsd.dimension.enabled.median=false
external.kafka.statsd.dimension.enabled.p99=false
external.kafka.statsd.dimension.enabled.rate15m=fasle
external.kafka.statsd.metrics.exclude_regex=(.*kafka\.cluster\..*)|(.*kafka\.log\.Log\.partition\..*)|(.*jvm.gc\..*)|(.*jvm\.fd_usage.*)|(.*jvm.daemon_threads\..*)|(.*jvm\.memory\.pool\..*)|(.*request\.ConsumerMetadata\..*)|(.*request\.ControlledShutdown\..*)|(.*request\.Heartbeat\..*)|(.*request\.JoinGroup\..*)|(.*request\.LeaderAndIsr\..*)|(.*request\.Metadata\..*)|(.*request\.OffsetFetch\..*)|(.*request\.Offsets\..*)|(.*request\.StopReplica\..*)|(.*request\.UpdateMetadata\..*)|(.*request\.OffsetCommit\..*)|(.*consumer\.FetchRequestAndResponseMetrics\..*)|(.*network\.RequestChannel\..*)|(.*OffsetManager\..*)|(.*FetcherStats\..*)|(.*BrokerTopicMetrics\.topic\..*)|(.*FetcherLagMetrics\.clientId\..*)|(.*DelayedFetchRequestMetrics\..*)|(.*networkProcessor\..*)|(.*FailedFetchRequestsPerSec.*)|(.*FailedProduceRequestsPerSec.*)|(.*KafkaController\.PreferredReplicaImbalanceCount.*)|(.*BytesRejectedPerSec.*)|(.*DelayedProducerRequestMetrics\..*)|(.*MinFetchRate.*)|(.*ExpiresPerSecond\..*)|(.*NumDelayedRequests.*)|(.*ControllerStats.*)|(.*FetchRequestPurgatory.*)|(.*KafkaRequestHandlerPool.*)|(.*ProducerRequestPurgatory.*)|(.*RequestQueueTimeMs.*)|(.*LocalTimeMs.*)|(.*RemoteTimeMs.*)|(.*ResponseSendTimeMs.*)|(.*NetworkProcessorAvgIdlePercent.*)|(.*kafka\.log\..*)|(.*kafka\.utils\..*)|(.*RequestMetrics\..*)|(.*kafka\.coordinator\..*)|(.*TotalFetchRequestsPerSec.*)|(.*TotalProduceRequestsPerSec.*)|(.*DelayedOperationPurgatory\..*)|(.*yammer-metrics-count)|(.*SessionExpireListener\..*)|(.*DelayedFetchMetrics\.*)
external.kafka.statsd.metrics.prefix=
external.kafka.statsd.port=8125
external.kafka.statsd.reporter.enabled=true
kafka.metrics.reporters=com.airbnb.kafka.KafkaStatsdMetricsReporter
queued.max.requests=500

{{ if $myEip }}
listener.security.protocol.map=INSIDE:PLAINTEXT,OUTSIDE:SSL
#security.inter.broker.protocol=INSIDE
inter.broker.listener.name=INSIDE
listeners=INSIDE://:9092,OUTSIDE://:9093
advertised.listeners=OUTSIDE://{{ $myEip }}:9093,INSIDE://{{ $myIp }}:9092
#enable.ssl.certificate.verification=false
ssl.endpoint.identification.algorithm=
#ssl.client.auth=required
ssl.truststore.location=/data/kafka/ssl/{{ $myEip }}/kafka.server.truststore.jks
ssl.keystore.location=/data/kafka/ssl/{{ $myEip }}/kafka.server.keystore.jks
ssl.truststore.password=qingcloud
ssl.keystore.password=qingcloud
ssl.key.password=qingcloud
{{- end  }}

KAFKA_SERVER_PROPERTIES_EOF

{{- end }}
